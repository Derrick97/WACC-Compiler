### Starting build.
# Target: keyword.mli.depends, tags: { bin_annot, debug, extension:mli, file:keyword.mli, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules keyword.mli > keyword.mli.depends
# Target: keyword.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:keyword.mli, interf, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o keyword.cmi keyword.mli
# Target: keyword.ml.depends, tags: { bin_annot, debug, extension:ml, file:keyword.ml, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules keyword.ml > keyword.ml.depends
# Target: version.ml.depends, tags: { bin_annot, debug, extension:ml, file:version.ml, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules version.ml > version.ml.depends
# Target: cmly_format.ml.depends, tags: { bin_annot, debug, extension:ml, file:cmly_format.ml, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules cmly_format.ml > cmly_format.ml.depends
# Target: cmly_api.ml.depends, tags: { bin_annot, debug, extension:ml, file:cmly_api.ml, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules cmly_api.ml > cmly_api.ml.depends
# Target: cmly_read.mli.depends, tags: { bin_annot, debug, extension:mli, file:cmly_read.mli, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules cmly_read.mli > cmly_read.mli.depends
# Target: cmly_api.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:cmly_api.cmo, file:cmly_api.ml, implem, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o cmly_api.cmo cmly_api.ml
# Target: cmly_read.cmi, tags: { bin_annot, byte, compile, debug, extension:mli, file:cmly_read.mli, interf, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o cmly_read.cmi cmly_read.mli
# Target: cmly_read.ml.depends, tags: { bin_annot, debug, extension:ml, file:cmly_read.ml, ocaml, ocamldep, quiet, safe_string, sdk, traverse }
/usr/bin/ocamldep.opt -modules cmly_read.ml > cmly_read.ml.depends
# Target: cmly_format.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:cmly_format.cmo, file:cmly_format.ml, implem, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o cmly_format.cmo cmly_format.ml
# Target: version.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:version.cmo, file:version.ml, implem, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o version.cmo version.ml
# Target: keyword.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:keyword.cmo, file:keyword.ml, implem, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o keyword.cmo keyword.ml
# Target: cmly_read.cmo, tags: { bin_annot, byte, compile, debug, extension:cmo, extension:ml, file:cmly_read.cmo, file:cmly_read.ml, implem, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -c -g -bin-annot -safe-string -o cmly_read.cmo cmly_read.ml
# Target: menhirSdk.cmo, tags: { bin_annot, byte, debug, extension:cmo, file:menhirSdk.cmo, ocaml, pack, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlc.opt -pack -g -bin-annot keyword.cmo version.cmo cmly_format.cmo cmly_api.cmo cmly_read.cmo -o menhirSdk.cmo
# Target: keyword.cmx, tags: { bin_annot, compile, debug, extension:cmx, extension:ml, file:keyword.cmx, file:keyword.ml, for-pack(MenhirSdk), implem, native, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlopt.opt -c -g -bin-annot -safe-string -for-pack MenhirSdk -o keyword.cmx keyword.ml
# Target: cmly_api.cmx, tags: { bin_annot, compile, debug, extension:cmx, extension:ml, file:cmly_api.cmx, file:cmly_api.ml, for-pack(MenhirSdk), implem, native, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlopt.opt -c -g -bin-annot -safe-string -for-pack MenhirSdk -o cmly_api.cmx cmly_api.ml
# Target: cmly_format.cmx, tags: { bin_annot, compile, debug, extension:cmx, extension:ml, file:cmly_format.cmx, file:cmly_format.ml, for-pack(MenhirSdk), implem, native, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlopt.opt -c -g -bin-annot -safe-string -for-pack MenhirSdk -o cmly_format.cmx cmly_format.ml
# Target: version.cmx, tags: { bin_annot, compile, debug, extension:cmx, extension:ml, file:version.cmx, file:version.ml, for-pack(MenhirSdk), implem, native, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlopt.opt -c -g -bin-annot -safe-string -for-pack MenhirSdk -o version.cmx version.ml
# Target: cmly_read.cmx, tags: { bin_annot, compile, debug, extension:cmx, extension:ml, file:cmly_read.cmx, file:cmly_read.ml, for-pack(MenhirSdk), implem, native, ocaml, quiet, safe_string, sdk, traverse }
/usr/bin/ocamlopt.opt -c -g -bin-annot -safe-string -for-pack MenhirSdk -o cmly_read.cmx cmly_read.ml
# Target: menhirSdk.cmx, tags: { bin_annot, debug, extension:cmx, file:menhirSdk.cmx, native, ocaml, pack, quiet, safe_string, sdk, traverse }
touch menhirSdk.mli  ; if  /usr/bin/ocamlopt.opt -pack -g -bin-annot keyword.cmx version.cmx cmly_format.cmx cmly_api.cmx cmly_read.cmx -o menhirSdk.cmx  ; then  rm -f menhirSdk.mli  ; else  rm -f menhirSdk.mli  ; exit 1; fi
# Compilation successful.
